{"ts":1359996958423,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var recognitionAdditionHandler = function() {\n\tif (recognition.started == false) {\n\t\trecognition.start()\n\t}\n}\nrecognition = {\n\trecognizeAlbum: function(album) {\n\t\tvar tracks = $(album).find(\".album-tracks table tbody tr.song.not-recognized\");\n\t\t$.each(tracks, function(k,v) {\n\t\t\trecognition.queue.push(v);\n\t\t})\n\t},\n  recognizeTrackList: function(list) {\n    var tracks = $(list).find(\"tr.song.not-recognized\");\n    $.each(tracks, function(k,v) {\n      recognition.queue.push(v)\n    })\n  },\n\tqueue: new EventedArray(recognitionAdditionHandler),\n\trecognizeTrack: function(obj) {\n\t\tvar track = obj.track,\n\t\t\t  cb\t  = obj.cb\n\t\tvar songtitle  = $(track).attr(\"data-name\"),\n\t\t\tsongartist = $(track).attr(\"data-artist\")\n\t\trecognition.findVideo({artist: songartist, title: songtitle}, function(video) {\n\t\t\tcb();\n\t\t\t/*\n\t\t\t\tUpload track to database!\n\t\t\t*/\n      var firsttrackinarray = (track.length != undefined && track.length != 0) ? track[0] : track;\n\t\t\trecognition.uploadTrack(track, video)\n\t\t\tvar dom   = (firsttrackinarray instanceof HTMLElement) ? $(firsttrackinarray) : $(\".song[data-id=\" + firsttrackinarray.id + \"]\")[0];\n\t\t\t//Mark it as recognized\n\t\t\t$(dom).addClass(\"recognized\")\n\t\t\t//Unmark it as not recognized\n\t\t\t.removeClass(\"not-recognized pending\")\n\t\t\t//Add YouTube ID to the dom\n\t\t\t.attr(\"data-ytid\", video.id.$t.substr(-11));\n      if ($(track).hasClass(\"wantstobeplayed\")) {\n            $(track).removeClass(\"wantstobeplayed\");\n            player.playSong($(track)[0]);\n      }\n\t\t\t/*\n\t\t\t\tIf song is in an album\n\t\t\t*/\n\t\t\t\tvar album = $(track).parents(\".album\");\n\t\t\t/*\n\t\t\t\tChecks if song is in a n album\n\t\t\t*/\n\t\t\tif (album.length != 0) {\n\t\t\t\t/*\n\t\t\t\t\tNumber of tracks that are recognized\n\t\t\t\t\tAlbum\n\t\t\t\t\tNumber of tracks total\n\t\t\t\t*/\n\t\t\t\tvar recognizedcount = ($(track).parents(\".album\").find(\".recognized\")).length + 1,\n\t\t\t\t\ttracks\t\t= album.data(\"tracks\");\n\t\t\t\tif (recognizedcount == tracks) {\n\t\t\t\t\trecognition.uploadAlbum(album[0])\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tstarted: false,\n\tstart: function() {\n\t\trecognition.started = true;\n\t\tvar loop = function() {\n\t\t\trecognition.recognizeTrack({track: recognition.queue.getArray()[0], cb: function() {\n\t\t\t\t\trecognition.queue.shift()\n\t\t\t\t\tif (recognition.queue.getArray().length == 0) {\n\t\t\t\t\t\trecognition.stop()\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tloop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tloop();\n\t},\n\tstop: function() {\n\t\trecognition.started = false;\n\t},\n\tfindVideo: function (song, callback) {\n        $.ajax({\n            url: \"http://gdata.youtube.com/feeds/api/videos\",\n            data: {\n                alt: \"json\",\n                \"max-results\": 15,\n                q: song.artist + \" - \" + song.title\n            },\n            success: function (json) {\n                var filterVideos = function(videotitle) {\n                    var filters = [\"cover\", \"parod\", \"chipmunk\", \"snippet\", \"preview\", \"live\", \"review\"];\n                    var filterout = false;\n                    $.each(filters, function(key, filter) {\n                        if (_s.include(videotitle.toLowerCase(), filter)) {\n                        //Filter covers, parodies and Chipmunk versions out\n                        filterout = true\n                        }\n                    })\n                    return filterout;\n                }\n                //Find the video most related to our video by duration.\n                var videos = json.feed.entry;\n                //TODO: Do we also want to compare levenshtein distance of song titles?\n                var videos = (_.filter(videos, function(video) {\n                    return (filterVideos(video.title.$t) == false)\n                }))\n                    var closestVideo = _.sortBy(videos, function (video) {\n                        return _s.levenshtein(_s.slugify(video.title.$t), _s.slugify(song.artist + \" - \"+ song.title))\n                    })[0];          \n                callback(closestVideo);\n            }\n        });\n    },\n    uploadTrack: function(track, video) {\n    \tvar videoid = video.id.$t.substr(-11);\n    \tvar json = $(track).data()\n    \tjson.ytid = videoid\n    \tsocket.emit('new-track', json);\n    },\n    uploadAlbum: function(album) {\n    \tvar json = $(album).data();\n    \tvar tracks = $(album).find(\".song\"), trackids = []\n    \t/*\n\t\t\tDon't upload whole tracks, only ID's\n    \t*/\n    \t$.each(tracks, function(k,track) {\n    \t\ttrackids.push($(track).data(\"id\"));\n    \t})\n    \tjson.tracklist = trackids;\n    \tsocket.emit('new-album', json);\n\n    }\n}\n\n\n\n\nfunction EventedArray(handler) {\n   this.stack = [];\n   this.mutationHandler = handler || function() {};\n   this.setHandler = function(f) {\n      this.mutationHandler = f;\n   };\n   this.callHandler = function() { \n      if(typeof this.mutationHandler === 'function') {\n         this.mutationHandler();\n      }\n   };\n   this.push = function(obj) {\n      this.stack.push(obj);\n      this.callHandler();\n   };\n   this.shift = function() {\n   \t  this.stack.shift();\n   }\n   this.pop = function() {\n      return this.stack.pop();\n   };\n   this.getArray = function() {\n      return this.stack;\n   }\n}"]],"start1":0,"start2":0,"length1":0,"length2":5049}]],"length":5049}
{"contributors":[],"silentsave":false,"ts":1359996977188,"patch":[[{"diffs":[[0,"    }\n}\n"],[-1,"\n\n\n\n"],[0,"function"]],"start1":4443,"start2":4443,"length1":20,"length2":16}]],"length":5045,"saved":false}
{"ts":1359997057077,"patch":[[{"diffs":[[0,"tack;\n   }\n}"],[1,"\n/*\n    For backend\n*/\nthis = recognition;"]],"start1":5033,"start2":5033,"length1":12,"length2":54}]],"length":5087,"saved":false}
{"ts":1359997172443,"patch":[[{"diffs":[[0,"     }))"],[1,";"],[0,"\n       "]],"start1":3603,"start2":3603,"length1":16,"length2":17}]],"length":5088,"saved":false}
{"ts":1359997356037,"patch":[[{"diffs":[[0,"\n*/\nthis"],[1,".recognition"],[0," = recog"]],"start1":5065,"start2":5065,"length1":16,"length2":28}]],"length":5100,"saved":false}
{"ts":1359997769712,"patch":[[{"diffs":[[0,"callback"],[-1,") {"],[1,", jquery) {\n        if (jquery) {\n            var $ = jquery;\n        }"],[0,"\n       "]],"start1":2408,"start2":2408,"length1":19,"length2":87}]],"length":5168,"saved":false}
{"ts":1359997808109,"patch":[[{"diffs":[[0,"back, jquery"],[1,", underscore"],[0,") {\n        "]],"start1":2412,"start2":2412,"length1":24,"length2":36},{"diffs":[[0,"uery;\n        }\n"],[1,"        if (underscore) {\n            var _ = underscore;\n        }\n"],[0,"        $.ajax({"]],"start1":2484,"start2":2484,"length1":32,"length2":100}]],"length":5248,"saved":false}
{"ts":1359997944262,"patch":[[{"diffs":[[0,"uery, underscore"],[1,", underscorestring"],[0,") {\n        if ("]],"start1":2420,"start2":2420,"length1":32,"length2":50},{"diffs":[[0,"core;\n        }\n"],[1,"        if (underscorestring) {\n            var _s = underscorestring;\n        }\n"],[0,"        $.ajax({"]],"start1":2570,"start2":2570,"length1":32,"length2":113}]],"length":5347,"saved":false}
{"ts":1359997965915,"patch":[[{"diffs":[[0,"                "],[-1,"var "],[0,"videos = (_.filt"]],"start1":3707,"start2":3707,"length1":36,"length2":32},{"diffs":[[0,"e.$t) =="],[1,"="],[0," false)\n"]],"start1":3819,"start2":3819,"length1":16,"length2":17}]],"length":5344,"saved":false}
